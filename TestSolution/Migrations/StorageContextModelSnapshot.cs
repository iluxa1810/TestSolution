// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestSolution;

namespace TestSolution.Migrations
{
    [DbContext(typeof(StorageContext))]
    partial class StorageContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestSolution.ChangeLocationHistory", b =>
                {
                    b.Property<int>("ChangeLocationHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ChangeLocationHistory_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateChange")
                        .HasColumnType("datetime");

                    b.Property<int>("LocationId")
                        .HasColumnName("Location_id")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnName("Storage_id")
                        .HasColumnType("int");

                    b.HasKey("ChangeLocationHistoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StorageId");

                    b.ToTable("ChangeLocationHistory");
                });

            modelBuilder.Entity("TestSolution.FileDetail", b =>
                {
                    b.Property<int>("FileDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FileDetail_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExtensionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("FileCount")
                        .HasColumnType("int");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("FolderId")
                        .HasColumnName("Folder_id")
                        .HasColumnType("int");

                    b.Property<int>("FolderScanHistoryId")
                        .HasColumnName("FolderScanHistory_id")
                        .HasColumnType("int");

                    b.HasKey("FileDetailId");

                    b.HasIndex("FolderScanHistoryId", "FolderId");

                    b.ToTable("FileDetail");
                });

            modelBuilder.Entity("TestSolution.Folder", b =>
                {
                    b.Property<int>("FolderScanHistoryId")
                        .HasColumnName("FolderScanHistory_id")
                        .HasColumnType("int");

                    b.Property<int>("FolderId")
                        .HasColumnName("Folder_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime");

                    b.Property<string>("FolderPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Lvl")
                        .HasColumnType("int");

                    b.Property<int>("Lvl444")
                        .HasColumnType("int");

                    b.Property<int>("Lvl4445")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ParentFolderId")
                        .HasColumnName("ParentFolder_id")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnName("Storage_id")
                        .HasColumnType("int");

                    b.Property<int>("TotalSubFolderCount")
                        .HasColumnType("int");

                    b.HasKey("FolderScanHistoryId", "FolderId");

                    b.HasIndex("DateDeleted")
                        .HasName("NonClusteredIndex-20170604-202451");

                    b.HasIndex("StorageId")
                        .HasName("IX_Storage_id");

                    b.HasIndex("FolderScanHistoryId", "ParentFolderId");

                    b.ToTable("Folder");
                });

            modelBuilder.Entity("TestSolution.FolderScanHistory", b =>
                {
                    b.Property<int>("FolderScanHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FolderScanHistory_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatorUserId")
                        .HasColumnName("CreatorUser_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEndScan")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStartScan")
                        .HasColumnType("datetime");

                    b.HasKey("FolderScanHistoryId");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("FolderScanHistory");
                });

            modelBuilder.Entity("TestSolution.Locaction", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Location_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("LocationTypeId")
                        .HasColumnName("LocationType_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("LocationId");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_Locaction_Name");

                    b.ToTable("Locaction");
                });

            modelBuilder.Entity("TestSolution.LocationType", b =>
                {
                    b.Property<int>("LocationTypeId")
                        .HasColumnName("LocationType_id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("LocationTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_LocationType_Name");

                    b.ToTable("LocationType");
                });

            modelBuilder.Entity("TestSolution.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Storage_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentHolderUserId")
                        .HasColumnName("CurrentHolderUser_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfLastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("LocationId")
                        .HasColumnName("Location_id")
                        .HasColumnType("int");

                    b.Property<int>("OwnerUserId")
                        .HasColumnName("OwnerUser_id")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("StorageTypeId")
                        .HasColumnName("StorageType_id")
                        .HasColumnType("int");

                    b.Property<long?>("TotalFreeSpace")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalSize")
                        .HasColumnType("bigint");

                    b.HasKey("StorageId");

                    b.HasIndex("CurrentHolderUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("TestSolution.StorageType", b =>
                {
                    b.Property<int>("StorageTypeId")
                        .HasColumnName("StorageType_id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("StorageTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_StorageType_Name");

                    b.ToTable("StorageType");
                });

            modelBuilder.Entity("TestSolution.StorageUserHolderHistory", b =>
                {
                    b.Property<int>("StorageUserHolderHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StorageUserHolderHistory_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateChange")
                        .HasColumnType("datetime");

                    b.Property<int>("FromUserId")
                        .HasColumnName("FromUser_id")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnName("Storage_id")
                        .HasColumnType("int");

                    b.Property<int>("ToUserId")
                        .HasColumnName("ToUser_id")
                        .HasColumnType("int");

                    b.HasKey("StorageUserHolderHistoryId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("StorageUserHolderHistory");
                });

            modelBuilder.Entity("TestSolution.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("User_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("UserId");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasName("UQ_User_Login");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TestSolution.ChangeLocationHistory", b =>
                {
                    b.HasOne("TestSolution.Locaction", "Location")
                        .WithMany("ChangeLocationHistory")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_ChangeLocationHistory_Location")
                        .IsRequired();

                    b.HasOne("TestSolution.Storage", "Storage")
                        .WithMany("ChangeLocationHistory")
                        .HasForeignKey("StorageId")
                        .HasConstraintName("FK_ChangeLocationHistory_Storage")
                        .IsRequired();
                });

            modelBuilder.Entity("TestSolution.FileDetail", b =>
                {
                    b.HasOne("TestSolution.Folder", "Folder")
                        .WithMany("FileDetail")
                        .HasForeignKey("FolderScanHistoryId", "FolderId")
                        .HasConstraintName("FK_FileDetail_Folder")
                        .IsRequired();
                });

            modelBuilder.Entity("TestSolution.Folder", b =>
                {
                    b.HasOne("TestSolution.FolderScanHistory", "FolderScanHistory")
                        .WithMany("Folder")
                        .HasForeignKey("FolderScanHistoryId")
                        .HasConstraintName("FK_Folder_FolderScanHistory")
                        .IsRequired();

                    b.HasOne("TestSolution.Storage", "Storage")
                        .WithMany("Folder")
                        .HasForeignKey("StorageId")
                        .HasConstraintName("FK_Folder_Storage")
                        .IsRequired();

                    b.HasOne("TestSolution.Folder", "FolderNavigation")
                        .WithMany("InverseFolderNavigation")
                        .HasForeignKey("FolderScanHistoryId", "ParentFolderId")
                        .HasConstraintName("FK_Folder");
                });

            modelBuilder.Entity("TestSolution.FolderScanHistory", b =>
                {
                    b.HasOne("TestSolution.User", "CreatorUser")
                        .WithMany("FolderScanHistory")
                        .HasForeignKey("CreatorUserId")
                        .HasConstraintName("FK_FolderScanHistory_User")
                        .IsRequired();
                });

            modelBuilder.Entity("TestSolution.Locaction", b =>
                {
                    b.HasOne("TestSolution.LocationType", "LocationType")
                        .WithMany("Locaction")
                        .HasForeignKey("LocationTypeId")
                        .HasConstraintName("FK_Locaction_LocationType");
                });

            modelBuilder.Entity("TestSolution.Storage", b =>
                {
                    b.HasOne("TestSolution.User", "CurrentHolderUser")
                        .WithMany("StorageCurrentHolderUser")
                        .HasForeignKey("CurrentHolderUserId")
                        .HasConstraintName("FK_Storage_User2")
                        .IsRequired();

                    b.HasOne("TestSolution.Locaction", "Location")
                        .WithMany("Storage")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Storage_Locaction")
                        .IsRequired();

                    b.HasOne("TestSolution.StorageType", "LocationNavigation")
                        .WithMany("Storage")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Storage_StorageType")
                        .IsRequired();

                    b.HasOne("TestSolution.User", "OwnerUser")
                        .WithMany("StorageOwnerUser")
                        .HasForeignKey("OwnerUserId")
                        .HasConstraintName("FK_Storage_User1")
                        .IsRequired();
                });

            modelBuilder.Entity("TestSolution.StorageUserHolderHistory", b =>
                {
                    b.HasOne("TestSolution.User", "FromUser")
                        .WithMany("StorageUserHolderHistoryFromUser")
                        .HasForeignKey("FromUserId")
                        .HasConstraintName("FK_StorageUserHolderHistory_User_1")
                        .IsRequired();

                    b.HasOne("TestSolution.User", "ToUser")
                        .WithMany("StorageUserHolderHistoryToUser")
                        .HasForeignKey("ToUserId")
                        .HasConstraintName("FK_StorageUserHolderHistory_User_2")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
